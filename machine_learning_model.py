# -*- coding: utf-8 -*-
"""machine_learning_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CPcyNeBwzvZ0gMcKpmdlqGw5M0KM6r76
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd

df = pd.read_csv('/content/drive/MyDrive/only_food_drug_int.csv')
allvalues = list(set(df['query'].unique())|(set(df['target'].unique())))

#For machine learning we need to convert the drug and food name into (1, 2, ...) based on the connected componenet
dic = {}
for i in range(len(allvalues)):
    dic[allvalues[i]] = i

#Storing the query and target in a dictionary using connected component. For example, Castalagin, Carlinoside, 0.6718576195773082 
#Here Carlinoside numerical label is 1516
g = []
for i in range(2000):
    g.append([])
for row in df.iterrows():
    x = dic[row[1][0]]
    y = dic[row[1][1]]
    z = row[1][2]
    g[x].append((y,z))
    g[y].append((x,z))

print(dic)

print("---------------------------")

print(g)

#using neighbour finding the neighbour of a node
#previous means the previous label of the neighbour of the node, 
#because, when we need the name of food or drug id, this will help me

neighbour = {}
previous = {}
cnt = 0
vis = [0]*len(allvalues)
def dfs(x):
    global cnt
    global vis
    global neighbour
    global previous
    vis[x] = 1
    neighbour[x] = cnt
    previous[cnt] = x
    cnt+=1
    for y in g[x]:
        if(vis[y[0]]==0):
            dfs(y[0])
for i in range(len(allvalues)):
    if(vis[i]==0):
        dfs(i)

print(neighbour)

print("---------------------")

print(previous)

#Makin 3 list for query, target and similarity respectivly

qq = []
tt = []
va = []
for row in df.iterrows():
    qq.append(neighbour[dic[row[1][0]]])
    tt.append(neighbour[dic[row[1][1]]])
    va.append(row[1][2])
  
print(qq)

print(tt)

print(va)

label = []
k = 1
j = 0

for i in range(len(va)):
  sim = va[i]
  if sim >= 0.613:
    label.append(k)
  else:
    label.append(j)


print(label)
print("-----")
label.count(1)

#Making features and label
X_main = [(qq[i],tt[i], va[i]) for i in range(len(qq))]
y_main = label

print(X_main)
print(y_main)

#Separating whole dataset (19072) for training and testing (3815)
X = X_main[:15257]
y = y_main[:15257]
print(X)
print(len(X))
print(y)
print(len(y))

test_X = X_main[15258:]
test_y = y_main[15258:]
print(test_X)
print(len(test_X))
print(test_y)
print(len(test_y))

#Training and validation separator (80% and 20%)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

#Importing classification model and accuracy metrix
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC

#Implementing Classification
classifiers = [
    SVC(),
    KNeighborsClassifier(n_neighbors=5)]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
trainingData    = X_train
trainingScores  = y_train
#predictionData  = predict
prediction_result = []
for item in classifiers:
    print(item)
    clf = item

    #train model with cv of 5 
    cv_scores = cross_val_score(clf, X, y, cv=5)
    
    clf.fit(trainingData, trainingScores)
    
    #y_pred = clf.predict(X_test)

    print(cv_scores)
    print('cv_scores mean:{}'.format(np.mean(cv_scores)))

    y_pred = cross_val_predict(clf, X, y, cv=5)
    conf_mat = confusion_matrix(y, y_pred)
    print(conf_mat)

    class_report = classification_report(y, y_pred)
    print(class_report)
    # print("Accuracy Scor:")
    # print(accuracy_score(y_pred, y_test))
    # print("Confusion Matrix:")
    # print(confusion_matrix(y_pred, y_test))
    # print("Classification Report:")
    # print(classification_report(y_pred, y_test))

    #prediction_result.append(clf.predict(predictionData))

for item in classifiers:
    print(item)
    clf = item

    y_pred = clf.predict(test_X)

    print("Accuracy Scor:")
    print(accuracy_score(y_pred, test_y))
    print("Confusion Matrix:")
    print(confusion_matrix(y_pred, test_y))
    print("Classification Report:")
    print(classification_report(y_pred, test_y))

feature_df = pd.DataFrame(test_X ,columns=["query", "target", "value"])
print(feature_df)

labels_df = pd.DataFrame(y_pred ,columns=["predicted_label"])
print(labels_df)

final_df = pd.concat([feature_df, labels_df], axis=1, sort=False)
print(final_df)

get_name_neib_df = final_df.replace({"query": neighbour, "target": neighbour})
print(get_name_neib_df)

reversed_dic = {dic[k]:k for k in dic}
print(reversed_dic)

get_name_prev_df = get_name_neib_df.replace({"query": reversed_dic, "target": reversed_dic})
print(get_name_prev_df)

get_name_prev_df.to_csv('/content/drive/MyDrive/using_machine-learning-FDI.csv')