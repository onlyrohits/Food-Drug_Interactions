# -*- coding: utf-8 -*-
"""drug_id_ssp_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GE_GE2BmL5c3YxeXxvIa8U3ybwSKodNi
"""

!wget -c https://repo.continuum.io/miniconda/Miniconda3-py37_4.8.3-Linux-x86_64.sh
!chmod +x Miniconda3-py37_4.8.3-Linux-x86_64.sh
!time bash ./Miniconda3-py37_4.8.3-Linux-x86_64.sh -b -f -p /usr/local
!time conda install -q -y -c conda-forge rdkit

import sys
sys.path.append('/usr/local/lib/python3.7/site-packages/')

from rdkit import Chem
from rdkit import DataStructs
from rdkit.Chem.Fingerprints import FingerprintMols
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

path = "/content/drive/My Drive/demo_metabolism_fdi_unique_small_molecule_approved_smiles.csv"

df_3 = pd.read_csv(path)
df_3.info

#Proff and make a list of Smiles and id
c_smiles = []
count = 0
for index, row in df_3.iterrows():
  try:
    cs = Chem.CanonSmiles(row['smiles'])
    c_smiles.append([row['drugbank.id'], cs])
  except:
    count = count + 1
    print('Count Invalid SMILES:', count, row['drugbank.id'], row['smiles'])
print()

c_smiles2 = DataFrame(c_smiles,columns=['drugbank.id','fps'])

# make a list of id, smiles, and mols
from pandas import DataFrame
ms = []
df = DataFrame(c_smiles,columns=['drugbank.id','smiles'])
for index, row in df.iterrows():
  mol = Chem.MolFromSmiles(row['smiles'])
  ms.append([row['drugbank.id'], row['smiles'], mol])
print(*ms, sep='\n')

# make a list of id, smiles, mols, and fingerprints (fp)
fps = []
df_fps = DataFrame(ms,columns=['drugbank.id','smiles', 'mol'])
df_fps.head

for index, row in df_fps.iterrows():
  fps_cal = FingerprintMols.FingerprintMol(row['mol'])
  fps.append([row['drugbank.id'], fps_cal])
# print(*fps, sep='\n')
len(fps)

# the list for the dataframe
qu, ta, sim = [], [], []

fps_2 = DataFrame(fps,columns=['drugbank.id','fps'])
fps_2 = fps_2[fps_2.columns[1]]
fps_2 = fps_2.values.tolist()
print(len(fps_2))

c_smiles2 = DataFrame(fps,columns=['drugbank.id','fps'])
c_smiles2 = c_smiles2[c_smiles2.columns[0]]
c_smiles2 = c_smiles2.values.tolist()
print(len(c_smiles2))

# compare all fp pairwise without duplicates
for n in range(len(fps_2)): # -1 so the last fp will not be used
    s = DataStructs.BulkTanimotoSimilarity(fps_2[n], fps_2[n+1:]) # +1 compare with the next to the last fp
    # print(len(s))
    # print(c_smiles[n], c_smiles[n+1:]) # witch mol is compared with what group
    # collect the SMILES and values
    for m in range(len(s)):
        qu.append(c_smiles2[n])
        ta.append(c_smiles2[n+1:][m])
        sim.append(s[m])
print(len(qu))
print(len(ta))
print(len(sim))

for n in range(len(fps_2)):
  print((c_smiles[n][0]))

# build the dataframe and sort it
d = {'query':qu, 'target':ta, 'Similarity':sim}
df_final = pd.DataFrame(data=d)
df_final = df_final.sort_values('query')
print(df_final)

# save as csv
df_final.to_csv('/content/drive/My Drive/id_similarity.csv', index=False, sep=',')